CREATE DATABASE class3_db;
USE class3_db;

CREATE Table if NOT exists employee(
    id int,
    name VARCHAR(50),
    age int,
    hiring_date date,
    salary int,
    city varchar(50)
)

insert into employee values(1,'Shashank', 24, '2021-08-10', 10000, 'Lucknow');
insert into employee values(2,'Rahul', 25, '2021-08-10', 20000, 'Khajuraho');
insert into employee values(3,'Sunny', 22, '2021-08-11', 11000, 'Banaglore');
insert into employee values(5,'Amit', 25, '2021-08-11', 12000, 'Noida');
insert into employee values(1,'Puneet', 26, '2021-08-12', 50000, 'Gurgaon');
select * from employee;

-- How to Perform multi updates?
UPDATE employee SET age = 20 , salary = 25000 WHERE hiring_date = '2021-08-10';
select * from employee;

-- Learning Auto Increment Example
-- It will generate a new number whenever a new record is inserted
CREATE TABLE auto_increment_example(
    id int AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(30)
);
INSERT INTO auto_increment_example(name) VALUES("Chirag");
INSERT INTO auto_increment_example(name) VALUES("Sparsh");
SELECT * FROM auto_increment_example;

-- Use of LIMIT keyword
SELECT * FROM employee LIMIT 2;

-- Sorting Data
-- 2 type of sortings -> Ascending & Descending
-- I'll be using 'ORDER BY' clause
-- by default it is ascending
select * from employee ORDER BY name;

-- Doing the sorting in Descending order
SELECT * FROM employee ORDER BY salary DESC;

-- Display employee data in desc order of salary & if salaries are smae for more than 1 employees,
-- then display them in ascending order of name
SELECT * FROM employee ORDER BY salary DESC, name ASC;
-- FEEL of above: 1st level of sorting applied of name, then if salary are same, 2nd level of sorting is applied.

-- Write a quey to find the employee who is getting maximum salary.
SELECT name FROM employee ORDER BY salary DESC LIMIT 1;
-- If I want my entire record to be printed then:
SELECT * FROM employee ORDER BY salary DESC LIMIT 1;

-- Conditional Operators : <,>,<=,>=
-- Logical Operators : AND, OR, NOT
SELECT * FROM employee;

-- List All employees who are getting salary more than 20000
SELECT * FROM employee WHERE salary > 20000;

-- Filter the records where age of employess = 20
SELECT * FROM employee Where age = 20;

-- Filter the records where age of employess is not equal to 20
-- 2 possible ways: using != or using <>
SELECT * FROM employee Where age != 20;
SELECT * FROM employee Where age <> 20;

-- Find those employees who joined the complany on 2021-08-11 and their salary is less than 11500
SELECT * FROM employee WHERE hiring_date = '2021-08-11' AND salary < 11500;

-- Find those employees who joined the complany after 2021-08-11 or their salary is less than 20000
SELECT * FROM employee WHERE hiring_date > '2021-08-11' OR salary < 20000;

-- How to use BETWEEN operation in WHERE clause
-- It is used to filter the records when we r not sure about the exact equality & inequality

-- Get all employees data who joined the complany b/w hiring_date 2021-08-05 to 2021-08-11
SELECT * FROM employee WHERE hiring_date >= '2021-08-05' AND hiring_date <= '2021-08-11';
-- Above query can be written in a single line using BETWEEN keyword
SELECT * FROM employee WHERE hiring_date BETWEEN '2021-08-05' AND '2021-08-11';
-- Both the values will be inclusive

-- How to use LIKE operation in WHERE clause
-- "LIKE" operation will be applied on "STRING" columns
-- WILDCARDS in LIKE : '%' , '_'
-- % : means 0, 1, more than 1 characters
-- _ : only 1 character

-- Filter all employees whose name starts with 'S'
SELECT * FROM employee WHERE name LIKE 'S%';

-- Filter all employees whose name starts with 'Sh'

SELECT * FROM employee WHERE name LIKE 'Sh%';

-- Filter all employees whose name ends with 'l'
SELECT * FROM employee WHERE name LIKE '%l';

-- Filter all employees whose name contains 'a'
SELECT * FROM employee WHERE name LIKE '%a%';

-- Filter all employees whose name starts with 'S' and ends with 'k'
SELECT * FROM employee WHERE name LIKE 'S%k';

-- Filter all employees whose name have exactly 5 characters
SELECT * FROM employee WHERE name LIKE '_____';

-- Filter all employees whose name have atleast 5 characters
SELECT * FROM employee WHERE name LIKE '%_____%';
