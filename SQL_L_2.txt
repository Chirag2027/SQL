-- LECTURE - 2
CREATE DATABASE class2_db;
USE class2_db;

CREATE Table if NOT exists employee
(
    id INT,
    name VARCHAR(50), 
    address VARCHAR(50), 
    city VARCHAR(30)
);

INSERT INTO employee VALUES(1, 'Chirag', 'Parsvnath Edens', 'Greater Noida');
SELECT * FROM employee;

-- Add new Column named as DOB in the employee table
-- we can do this using ALTER command
ALTER TABLE employee ADD DOB DATE;
DESC employee;
-- Mera jo already inserted Record tha table me, usme DOB column ki value of NULL hoga

-- Modify existing colum in a table --> Change datatype of name column or increase length of name column
ALTER TABLE employee MODIFY COLUMN name VARCHAR(100);

-- DELETE Existing Column from given table
ALTER TABLE employee DROP COLUMN city;
SELECT * FROM employee;

-- Foreign Key in Detail while doing JOINS
-- Create tables for Foreign Key DEMO
CREATE Table customer
(
    cust_id INT,
    name VARCHAR(50),
    age INT,
    CONSTRAINT pk PRIMARY KEY (cust_id)
);

CREATE Table orders
(
    order_id INT,
    order_num INT,
    customer_id INT, 
    CONSTRAINT pk PRIMARY KEY (order_id),
    CONSTRAINT fk FOREIGN KEY (customer_id) REFERENCES customer(cust_id)
);


-- Rename the Column name
-- name to full_name
ALTER TABLE employee RENAME COLUMN name TO full_name;  

-- Add UNIQUE Integrity Constraint to 'id' column
-- Constraint name --> id_unique
ALTER TABLE employee ADD CONSTRAINT id_unique UNIQUE(id);

-- Above command test krne ke liye
INSERT INTO employee VALUES(1, 'Chirag Verma', 'Parsvnath Edens Alpha 2', '2021-01-06');

-- DROP Constraint from existing Table
ALTER TABLE employee DROP CONSTRAINT id_unique;

-- Checking if Constraint is removed or not
INSERT INTO employee VALUES(1, 'Chirag Verma', 'Parsvnath Edens Alpha 2', '2021-01-06');
SELECT * FROM employee;

-- KEYS
CREATE TABLE IF NOT EXISTS persons
(
    id INT,
    name VARCHAR(50),
    age INT,
    -- Defining PRIMARY KEYS
    -- Method -1) PRIMARY KEY (id)
    -- But I will use Method -2 shown below
    CONSTRAINT pk PRIMARY KEY (id)
);

INSERT INTO persons VALUES(1, 'Chirag', 20);
INSERT INTO persons VALUES(1, 'Rahul', 23);
-- Above LOC not able to execute due to Primary Key

INSERT INTO persons VALUES(NULL, 'Chirag', 20);

-- 'age' ko UNIQUE krdo
ALTER Table persons ADD CONSTRAINT age_unique UNIQUE(age);
SELECT * FROM persons;
INSERT INTO persons VALUES(2, 'Rahul', 38);

-- Not able to insert as age is UNIQUE
INSERT INTO persons VALUES(3, 'Mahesh', 38);

-- UNIQUE NULL allow kr deta hai
INSERT INTO persons VALUES(3, 'Mahesh', NULL);
SELECT * FROM persons;

-- UNIQUE allows NULL, but PK doesn't
INSERT INTO persons VALUES(4, 'Om', NULL);

-- Foreign Key in Detail while doing JOINS
-- Create tables for Foreign Key DEMO
CREATE Table customer
(
    cust_id INT,
    name VARCHAR(50),
    age INT,
    CONSTRAINT pk PRIMARY KEY (cust_id)
);

CREATE Table orders
(
    order_id INT,
    order_num INT,
    customer_id INT, 
    CONSTRAINT pk PRIMARY KEY (order_id),
    CONSTRAINT fk FOREIGN KEY (customer_id) REFERENCES customer(cust_id)
);

-- Difference b/w DROP & TRUNCATE commands
-- These commands can be used to Delete the data from the tables
-- TRUNCATE ->> will delete the data only, not delete the table structure and schema
-- DROP ->> will delete the data along with table structure and schema

SELECT * FROM persons;
TRUNCATE Table persons;
SELECT * FROM persons;

DROP TABLE persons;

-- Operations with SELECT command {DQL}

DROP TABLE employee;

create table if not exists employee(
    id INT,
    name VARCHAR(50),
    age INT,
    hiring_date DATE,
    salary INT,
    city VARCHAR(50)
);

INSERT INTO employee VALUES(1,'Shashank', 24, '2021-08-10', 10000, 'Lucknow');
INSERT INTO employee VALUES(2,'Rahul', 25, '2021-08-10', 20000, 'Khajuraho');
INSERT INTO employee VALUES(3,'Sunny', 22, '2021-08-11', 11000, 'Banaglore');
INSERT INTO employee VALUES(5,'Amit', 25, '2021-08-11', 12000, 'Noida');
INSERT INTO employee VALUES(1,'Puneet', 26, '2021-08-12', 50000, 'Gurgaon');

SELECT * FROM employee;

-- Count total Records/Rows in the table
SELECT COUNT(*) FROM employee;

-- O/P me column name bhot ackward sa aa rha hai - 'COUNT(*)'
-- So we can use Alias taaki column name kuch meaningful saa dikhe

-- Alias Declaration
SELECT COUNT(*) AS total_row_count FROM employee;
-- total_row_count mera alias hai jo O/P me as a column name dikhega

-- Display all columns in the final result
SELECT * FROM employee;

-- Display specific columns in the final result
SELECT name, salary FROM employee;

-- Alias for multiple columns
SELECT name AS emp_name, salary AS emp_salary FROM employee;

-- Print unique hiring_dates from the employee table when employees joined it
SELECT DISTINCT (hiring_date) as dist_hiring_date FROM employee; 

-- How many unique age values in the table??
SELECT COUNT(DISTINCT(age)) as total_unique_ages FROM employee;

-- Increment salary of each employee by 20% & display final result with new_salary
SELECT id,
       name,
       salary as old_salary, 
       (salary + salary * 0.2) as new_salary
FROM employee;

-- Syntax for UPDATE Command
-- Original table me reflect hogi
-- SET ->> modify some values in the existing tables
UPDATE employee SET age = 20;
-- here updates has been made for all rows
SELECT * FROM employee;

-- Update the salary of the employees after giving 20% increment
UPDATE employee SET salary = salary * 1.2;


